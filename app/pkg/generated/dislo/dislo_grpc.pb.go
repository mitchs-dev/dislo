// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.0
// - protoc             v5.29.0
// source: dislo.proto

package dislo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dislo_Lock_FullMethodName   = "/dislo.Dislo/Lock"
	Dislo_Unlock_FullMethodName = "/dislo.Dislo/Unlock"
	Dislo_Create_FullMethodName = "/dislo.Dislo/Create"
	Dislo_Delete_FullMethodName = "/dislo.Dislo/Delete"
	Dislo_Status_FullMethodName = "/dislo.Dislo/Status"
	Dislo_List_FullMethodName   = "/dislo.Dislo/List"
)

// DisloClient is the client API for Dislo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisloClient interface {
	Lock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Unlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Create(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Status(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type disloClient struct {
	cc grpc.ClientConnInterface
}

func NewDisloClient(cc grpc.ClientConnInterface) DisloClient {
	return &disloClient{cc}
}

func (c *disloClient) Lock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dislo_Lock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disloClient) Unlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dislo_Unlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disloClient) Create(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dislo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disloClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dislo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disloClient) Status(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dislo_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disloClient) List(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dislo_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisloServer is the server API for Dislo service.
// All implementations must embed UnimplementedDisloServer
// for forward compatibility.
type DisloServer interface {
	Lock(context.Context, *Request) (*Response, error)
	Unlock(context.Context, *Request) (*Response, error)
	Create(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	Status(context.Context, *Request) (*Response, error)
	List(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedDisloServer()
}

// UnimplementedDisloServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDisloServer struct{}

func (UnimplementedDisloServer) Lock(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedDisloServer) Unlock(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedDisloServer) Create(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDisloServer) Delete(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDisloServer) Status(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDisloServer) List(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDisloServer) mustEmbedUnimplementedDisloServer() {}
func (UnimplementedDisloServer) testEmbeddedByValue()               {}

// UnsafeDisloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisloServer will
// result in compilation errors.
type UnsafeDisloServer interface {
	mustEmbedUnimplementedDisloServer()
}

func RegisterDisloServer(s grpc.ServiceRegistrar, srv DisloServer) {
	// If the following call pancis, it indicates UnimplementedDisloServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dislo_ServiceDesc, srv)
}

func _Dislo_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisloServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dislo_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisloServer).Lock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dislo_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisloServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dislo_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisloServer).Unlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dislo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisloServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dislo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisloServer).Create(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dislo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisloServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dislo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisloServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dislo_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisloServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dislo_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisloServer).Status(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dislo_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisloServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dislo_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisloServer).List(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Dislo_ServiceDesc is the grpc.ServiceDesc for Dislo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dislo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dislo.Dislo",
	HandlerType: (*DisloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Dislo_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Dislo_Unlock_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Dislo_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Dislo_Delete_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Dislo_Status_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Dislo_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dislo.proto",
}
